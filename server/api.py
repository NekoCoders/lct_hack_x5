import logging
import time
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse

# from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# ------------ –î–æ–±–∞–≤–ª—è–µ–º –≤ sys.path:
import sys
import os

CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, ".."))
if PROJECT_ROOT not in sys.path:
    sys.path.insert(0, PROJECT_ROOT)
    print(PROJECT_ROOT)
# -------------
from server.configure_logger import configure_file_rotating_logger
from server.inference_queue import InferenceQueue
from server.interface import PredictionRequest, Entity

app = FastAPI(title="Neko Coders NER Prediction API", version="1.0.0", debug=True)
inq = InferenceQueue(maxsize=200, request_timeout_s=60.0)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è CSS/JS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

configure_file_rotating_logger()
log = logging.getLogger("api")


@app.post("/api/predict", response_model=list[Entity])
async def predict_entities_endpoint(request: PredictionRequest):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç–µ
    """
    try:
        log.info(f"POST api/predict body='{request.model_dump_json()}'")
        start_time = time.perf_counter()  # TODO: move to decorator
        if not request.input or not request.input.strip():
            raise HTTPException(status_code=400, detail="Input text cannot be empty")

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if len(request.input) > 1000:
            raise HTTPException(status_code=400, detail="Input text too long")
        response = await inq.submit(request.input)

        duration = time.perf_counter() - start_time
        log.info(f"/api/predict executed in {duration:.3f}s")
        return response

    except HTTPException:
        # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction error: {str(e)}")


@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>NER Prediction API Test</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            textarea { width: 100%; height: 100px; margin: 10px 0; padding: 10px; }
            button { padding: 10px 20px; background: #007bff; color: white; border: none; cursor: pointer; }
            button:hover { background: #0056b3; }
            .result { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; }
            .entity { display: inline-block; margin: 2px; padding: 2px 5px; border-radius: 3px; }
            .B-TYPE { background: #ffcccc; }
            .I-TYPE { background: #ffdddd; }
            .B-BRAND { background: #ccccff; }
            .I-BRAND { background: #ddddff; }
            .B-VOLUME { background: #ccffcc; }
            .I-VOLUME { background: #ddffdd; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üß† NER Prediction API Test</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:</p>
            
            <textarea id="textInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...">–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ –∏ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å–ª–æ –ß—É–¥–æ.</textarea>
            
            <button onclick="predictEntities()">üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏</button>
            
            <div id="result" class="result" style="display:none;">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <div id="highlightedText"></div>
                <pre id="jsonResult"></pre>
            </div>

            <div style="margin-top: 30px;">
                <h3>–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                <button onclick="loadExample(1)">–ü—Ä–∏–º–µ—Ä 1</button>
                <button onclick="loadExample(2)">–ü—Ä–∏–º–µ—Ä 2</button>
                <button onclick="loadExample(3)">–ü—Ä–∏–º–µ—Ä 3</button>
            </div>

            <script>
                const examples = {
                    1: "–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ –∏ —Å–≥—É—â–µ–Ω–Ω–æ–µ –º–∞—Å–ª–æ.",
                    2: "–í –º–∞–≥–∞–∑–∏–Ω–µ –±—ã–ª–æ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ –æ—Ç –î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ –∏ —á—É–¥–æ –º–æ–ª–æ–∫–æ.",
                    3: "–°–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ –∏ —Å–≤–µ–∂–µ–µ –º—è—Å–æ - –ª—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã."
                };

                function loadExample(num) {
                    document.getElementById('textInput').value = examples[num];
                }

                async function predictEntities() {
                    const text = document.getElementById('textInput').value;
                    const resultDiv = document.getElementById('result');
                    const highlightedDiv = document.getElementById('highlightedText');
                    const jsonPre = document.getElementById('jsonResult');

                    try {
                        const response = await fetch('/api/predict', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ input: text })
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        jsonPre.textContent = JSON.stringify(data, null, 2);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–µ–π
                        let highlightedText = text;
                        const entities = data.sort((a, b) => b.start_index - a.start_index);
                        
                        entities.forEach(entity => {
                            const entityText = text.substring(entity.start_index, entity.end_index);
                            const highlighted = `<span class="entity ${entity.entity}" title="${entity.entity}">${entityText}</span>`;
                            highlightedText = highlightedText.substring(0, entity.start_index) + 
                                            highlighted + 
                                            highlightedText.substring(entity.end_index);
                        });
                        
                        highlightedDiv.innerHTML = '<strong>–¢–µ–∫—Å—Ç —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏:</strong><br>' + highlightedText;
                        resultDiv.style.display = 'block';

                    } catch (error) {
                        jsonPre.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
                        resultDiv.style.display = 'block';
                    }
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.onload = function() {
                    predictEntities();
                };
            </script>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/health")
async def health_check():
    return {"status": "healthy"}


@app.get("/test")
async def test_endpoint():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ä–∞–±–æ—Ç—ã
    """
    start_time = time.perf_counter()  # TODO: move to decorator
    test_text = "–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ"
    try:
        predictions = await inq.submit(test_text)
    except HTTPException:
        # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction error: {str(e)}")
    duration = time.perf_counter() - start_time
    log.info(f"/test executed in {duration:.3f}s")
    return {
        "test_text": test_text,
        "predictions": predictions,
    }

# lifespan ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
@app.on_event("startup")
async def _startup():
    await inq.start()

@app.on_event("shutdown")
async def _shutdown():
    await inq.stop()

if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000, workers=1)
