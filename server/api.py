from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
from typing import List, Dict, Optional
import re

from model_runner import infer_model

app = FastAPI(title="NER Prediction API", version="1.0.0", debug=True)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è CSS/JS –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class PredictionRequest(BaseModel):
    input: str

class Entity(BaseModel):
    start_index: int
    end_index: int
    entity: str

# –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å)
def predict_entities(text: str) -> List[Entity]:
    """
    –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ ML –º–æ–¥–µ–ª—å
    """

    model_out = infer_model(text)
    try:
        entities = [Entity(start_index=ent["start"], end_index=ent["end"], entity=ent["entity"]) for ent in model_out]
    except Exception as e:
        print(e)

    # entities = []
    
    # # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    # patterns = {
    #     'B-TYPE': [r'\b—Å–≥—É—â–µ–Ω–Ω–æ–µ\b', r'\b—Å–≤–µ–∂–µ–µ\b', r'\b–ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ\b'],
    #     'I-TYPE': [r'\b–º–æ–ª–æ–∫–æ\b', r'\b–º—è—Å–æ\b', r'\b–º–∞—Å–ª–æ\b'],
    #     'B-BRAND': [r'\b–ø—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ\b', r'\b–¥–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ\b', r'\b—á—É–¥–æ\b'],
    # }
    
    # text_lower = text.lower()
    
    # for entity_type, regex_list in patterns.items():
    #     for pattern in regex_list:
    #         for match in re.finditer(pattern, text_lower):
    #             entities.append(Entity(
    #                 start_index=match.start(),
    #                 end_index=match.end(),
    #                 entity=entity_type
    #             ))
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
    entities.sort(key=lambda x: x.start_index)
    
    return entities

@app.post("/api/predict", response_model=List[Entity])
async def predict_entities_endpoint(request: PredictionRequest):
    """
    –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–∫—Å—Ç–µ
    """
    try:
        if not request.input or not request.input.strip():
            raise HTTPException(status_code=400, detail="Input text cannot be empty")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if len(request.input) > 1000:
            raise HTTPException(status_code=400, detail="Input text too long")
        
        entities = predict_entities(request.input)
        
        return entities
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction error: {str(e)}")

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>NER Prediction API Test</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            textarea { width: 100%; height: 100px; margin: 10px 0; padding: 10px; }
            button { padding: 10px 20px; background: #007bff; color: white; border: none; cursor: pointer; }
            button:hover { background: #0056b3; }
            .result { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; }
            .entity { display: inline-block; margin: 2px; padding: 2px 5px; border-radius: 3px; }
            .B-TYPE { background: #ffcccc; }
            .I-TYPE { background: #ffdddd; }
            .B-BRAND { background: #ccccff; }
            .I-BRAND { background: #ddddff; }
            .B-VOLUME { background: #ccffcc; }
            .I-VOLUME { background: #ddffdd; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üß† NER Prediction API Test</h1>
            <p>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:</p>
            
            <textarea id="textInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...">–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ –∏ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å–ª–æ –ß—É–¥–æ.</textarea>
            
            <button onclick="predictEntities()">üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏</button>
            
            <div id="result" class="result" style="display:none;">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <div id="highlightedText"></div>
                <pre id="jsonResult"></pre>
            </div>

            <div style="margin-top: 30px;">
                <h3>–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
                <button onclick="loadExample(1)">–ü—Ä–∏–º–µ—Ä 1</button>
                <button onclick="loadExample(2)">–ü—Ä–∏–º–µ—Ä 2</button>
                <button onclick="loadExample(3)">–ü—Ä–∏–º–µ—Ä 3</button>
            </div>

            <script>
                const examples = {
                    1: "–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ –∏ —Å–≥—É—â–µ–Ω–Ω–æ–µ –º–∞—Å–ª–æ.",
                    2: "–í –º–∞–≥–∞–∑–∏–Ω–µ –±—ã–ª–æ –ø–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –º—è—Å–æ –æ—Ç –î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ –∏ —á—É–¥–æ –º–æ–ª–æ–∫–æ.",
                    3: "–°–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ –∏ —Å–≤–µ–∂–µ–µ –º—è—Å–æ - –ª—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã."
                };

                function loadExample(num) {
                    document.getElementById('textInput').value = examples[num];
                }

                async function predictEntities() {
                    const text = document.getElementById('textInput').value;
                    const resultDiv = document.getElementById('result');
                    const highlightedDiv = document.getElementById('highlightedText');
                    const jsonPre = document.getElementById('jsonResult');

                    try {
                        const response = await fetch('/api/predict', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ input: text })
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        jsonPre.textContent = JSON.stringify(data, null, 2);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–µ–π
                        let highlightedText = text;
                        const entities = data.sort((a, b) => b.start_index - a.start_index);
                        
                        entities.forEach(entity => {
                            const entityText = text.substring(entity.start_index, entity.end_index);
                            const highlighted = `<span class="entity ${entity.entity}" title="${entity.entity}">${entityText}</span>`;
                            highlightedText = highlightedText.substring(0, entity.start_index) + 
                                            highlighted + 
                                            highlightedText.substring(entity.end_index);
                        });
                        
                        highlightedDiv.innerHTML = '<strong>–¢–µ–∫—Å—Ç —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏:</strong><br>' + highlightedText;
                        resultDiv.style.display = 'block';

                    } catch (error) {
                        jsonPre.textContent = '–û—à–∏–±–∫–∞: ' + error.message;
                        resultDiv.style.display = 'block';
                    }
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.onload = function() {
                    predictEntities();
                };
            </script>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

@app.get("/test")
async def test_endpoint():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º —Ä–∞–±–æ—Ç—ã
    """
    test_text = "–Ø –∫—É–ø–∏–ª —Å–≤–µ–∂–µ–µ –º–æ–ª–æ–∫–æ –ü—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ"
    entities = predict_entities(test_text)
    
    return {
        "test_text": test_text,
        "predictions": entities,
        "message": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)